import {
  require_react_dom
} from "./chunk-DI3EVMXH.js";
import {
  createSvgIcon,
  init_createSvgIcon
} from "./chunk-CLFAMCKM.js";
import {
  capitalize,
  init_capitalize
} from "./chunk-44SDKBMD.js";
import {
  deprecatedPropType,
  init_deprecatedPropType,
  init_requirePropFactory,
  requirePropFactory
} from "./chunk-7U6QNEY4.js";
import {
  require_react
} from "./chunk-JFTBQ7A7.js";
import {
  __esm,
  __export,
  __toESM
} from "./chunk-AC2VUBZ6.js";

// node_modules/@material-ui/core/esm/utils/createChainedFunction.js
function createChainedFunction() {
  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
    funcs[_key] = arguments[_key];
  }
  return funcs.reduce(function(acc, func) {
    if (func == null) {
      return acc;
    }
    if (true) {
      if (typeof func !== "function") {
        console.error("Material-UI: Invalid Argument Type, must only provide functions, undefined, or null.");
      }
    }
    return function chainedFunction() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      acc.apply(this, args);
      func.apply(this, args);
    };
  }, function() {
  });
}
var init_createChainedFunction = __esm({
  "node_modules/@material-ui/core/esm/utils/createChainedFunction.js"() {
  }
});

// node_modules/@material-ui/core/esm/utils/debounce.js
function debounce(func) {
  var wait = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 166;
  var timeout;
  function debounced() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    var that = this;
    var later = function later2() {
      func.apply(that, args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  }
  debounced.clear = function() {
    clearTimeout(timeout);
  };
  return debounced;
}
var init_debounce = __esm({
  "node_modules/@material-ui/core/esm/utils/debounce.js"() {
  }
});

// node_modules/@material-ui/core/esm/utils/isMuiElement.js
function isMuiElement(element, muiNames) {
  return React.isValidElement(element) && muiNames.indexOf(element.type.muiName) !== -1;
}
var React;
var init_isMuiElement = __esm({
  "node_modules/@material-ui/core/esm/utils/isMuiElement.js"() {
    React = __toESM(require_react());
  }
});

// node_modules/@material-ui/core/esm/utils/ownerDocument.js
function ownerDocument(node) {
  return node && node.ownerDocument || document;
}
var init_ownerDocument = __esm({
  "node_modules/@material-ui/core/esm/utils/ownerDocument.js"() {
  }
});

// node_modules/@material-ui/core/esm/utils/ownerWindow.js
function ownerWindow(node) {
  var doc = ownerDocument(node);
  return doc.defaultView || window;
}
var init_ownerWindow = __esm({
  "node_modules/@material-ui/core/esm/utils/ownerWindow.js"() {
    init_ownerDocument();
  }
});

// node_modules/@material-ui/core/esm/utils/setRef.js
function setRef(ref, value) {
  if (typeof ref === "function") {
    ref(value);
  } else if (ref) {
    ref.current = value;
  }
}
var init_setRef = __esm({
  "node_modules/@material-ui/core/esm/utils/setRef.js"() {
  }
});

// node_modules/@material-ui/core/esm/utils/unsupportedProp.js
function unsupportedProp(props, propName, componentName, location, propFullName) {
  if (false) {
    return null;
  }
  var propFullNameSafe = propFullName || propName;
  if (typeof props[propName] !== "undefined") {
    return new Error("The prop `".concat(propFullNameSafe, "` is not supported. Please remove it."));
  }
  return null;
}
var init_unsupportedProp = __esm({
  "node_modules/@material-ui/core/esm/utils/unsupportedProp.js"() {
  }
});

// node_modules/@material-ui/core/esm/utils/useControlled.js
function useControlled(_ref) {
  var controlled = _ref.controlled, defaultProp = _ref.default, name = _ref.name, _ref$state = _ref.state, state = _ref$state === void 0 ? "value" : _ref$state;
  var _React$useRef = React2.useRef(controlled !== void 0), isControlled = _React$useRef.current;
  var _React$useState = React2.useState(defaultProp), valueState = _React$useState[0], setValue = _React$useState[1];
  var value = isControlled ? controlled : valueState;
  if (true) {
    React2.useEffect(function() {
      if (isControlled !== (controlled !== void 0)) {
        console.error(["Material-UI: A component is changing the ".concat(isControlled ? "" : "un", "controlled ").concat(state, " state of ").concat(name, " to be ").concat(isControlled ? "un" : "", "controlled."), "Elements should not switch from uncontrolled to controlled (or vice versa).", "Decide between using a controlled or uncontrolled ".concat(name, " ") + "element for the lifetime of the component.", "The nature of the state is determined during the first render, it's considered controlled if the value is not `undefined`.", "More info: https://fb.me/react-controlled-components"].join("\n"));
      }
    }, [controlled]);
    var _React$useRef2 = React2.useRef(defaultProp), defaultValue = _React$useRef2.current;
    React2.useEffect(function() {
      if (!isControlled && defaultValue !== defaultProp) {
        console.error(["Material-UI: A component is changing the default ".concat(state, " state of an uncontrolled ").concat(name, " after being initialized. ") + "To suppress this warning opt to use a controlled ".concat(name, ".")].join("\n"));
      }
    }, [JSON.stringify(defaultProp)]);
  }
  var setValueIfUncontrolled = React2.useCallback(function(newValue) {
    if (!isControlled) {
      setValue(newValue);
    }
  }, []);
  return [value, setValueIfUncontrolled];
}
var React2;
var init_useControlled = __esm({
  "node_modules/@material-ui/core/esm/utils/useControlled.js"() {
    React2 = __toESM(require_react());
  }
});

// node_modules/@material-ui/core/esm/utils/useEventCallback.js
function useEventCallback(fn) {
  var ref = React3.useRef(fn);
  useEnhancedEffect(function() {
    ref.current = fn;
  });
  return React3.useCallback(function() {
    return (0, ref.current).apply(void 0, arguments);
  }, []);
}
var React3, useEnhancedEffect;
var init_useEventCallback = __esm({
  "node_modules/@material-ui/core/esm/utils/useEventCallback.js"() {
    React3 = __toESM(require_react());
    useEnhancedEffect = typeof window !== "undefined" ? React3.useLayoutEffect : React3.useEffect;
  }
});

// node_modules/@material-ui/core/esm/utils/useForkRef.js
function useForkRef(refA, refB) {
  return React4.useMemo(function() {
    if (refA == null && refB == null) {
      return null;
    }
    return function(refValue) {
      setRef(refA, refValue);
      setRef(refB, refValue);
    };
  }, [refA, refB]);
}
var React4;
var init_useForkRef = __esm({
  "node_modules/@material-ui/core/esm/utils/useForkRef.js"() {
    React4 = __toESM(require_react());
    init_setRef();
  }
});

// node_modules/@material-ui/core/esm/utils/unstable_useId.js
function useId(idOverride) {
  var _React$useState = React5.useState(idOverride), defaultId = _React$useState[0], setDefaultId = _React$useState[1];
  var id = idOverride || defaultId;
  React5.useEffect(function() {
    if (defaultId == null) {
      setDefaultId("mui-".concat(Math.round(Math.random() * 1e5)));
    }
  }, [defaultId]);
  return id;
}
var React5;
var init_unstable_useId = __esm({
  "node_modules/@material-ui/core/esm/utils/unstable_useId.js"() {
    React5 = __toESM(require_react());
  }
});

// node_modules/@material-ui/core/esm/utils/useIsFocusVisible.js
function focusTriggersKeyboardModality(node) {
  var type = node.type, tagName = node.tagName;
  if (tagName === "INPUT" && inputTypesWhitelist[type] && !node.readOnly) {
    return true;
  }
  if (tagName === "TEXTAREA" && !node.readOnly) {
    return true;
  }
  if (node.isContentEditable) {
    return true;
  }
  return false;
}
function handleKeyDown(event) {
  if (event.metaKey || event.altKey || event.ctrlKey) {
    return;
  }
  hadKeyboardEvent = true;
}
function handlePointerDown() {
  hadKeyboardEvent = false;
}
function handleVisibilityChange() {
  if (this.visibilityState === "hidden") {
    if (hadFocusVisibleRecently) {
      hadKeyboardEvent = true;
    }
  }
}
function prepare(doc) {
  doc.addEventListener("keydown", handleKeyDown, true);
  doc.addEventListener("mousedown", handlePointerDown, true);
  doc.addEventListener("pointerdown", handlePointerDown, true);
  doc.addEventListener("touchstart", handlePointerDown, true);
  doc.addEventListener("visibilitychange", handleVisibilityChange, true);
}
function isFocusVisible(event) {
  var target = event.target;
  try {
    return target.matches(":focus-visible");
  } catch (error) {
  }
  return hadKeyboardEvent || focusTriggersKeyboardModality(target);
}
function handleBlurVisible() {
  hadFocusVisibleRecently = true;
  window.clearTimeout(hadFocusVisibleRecentlyTimeout);
  hadFocusVisibleRecentlyTimeout = window.setTimeout(function() {
    hadFocusVisibleRecently = false;
  }, 100);
}
function useIsFocusVisible() {
  var ref = React6.useCallback(function(instance) {
    var node = ReactDOM.findDOMNode(instance);
    if (node != null) {
      prepare(node.ownerDocument);
    }
  }, []);
  if (true) {
    React6.useDebugValue(isFocusVisible);
  }
  return {
    isFocusVisible,
    onBlurVisible: handleBlurVisible,
    ref
  };
}
var React6, ReactDOM, hadKeyboardEvent, hadFocusVisibleRecently, hadFocusVisibleRecentlyTimeout, inputTypesWhitelist;
var init_useIsFocusVisible = __esm({
  "node_modules/@material-ui/core/esm/utils/useIsFocusVisible.js"() {
    React6 = __toESM(require_react());
    ReactDOM = __toESM(require_react_dom());
    hadKeyboardEvent = true;
    hadFocusVisibleRecently = false;
    hadFocusVisibleRecentlyTimeout = null;
    inputTypesWhitelist = {
      text: true,
      search: true,
      url: true,
      tel: true,
      email: true,
      password: true,
      number: true,
      date: true,
      month: true,
      week: true,
      time: true,
      datetime: true,
      "datetime-local": true
    };
  }
});

// node_modules/@material-ui/core/esm/utils/index.js
var utils_exports = {};
__export(utils_exports, {
  capitalize: () => capitalize,
  createChainedFunction: () => createChainedFunction,
  createSvgIcon: () => createSvgIcon,
  debounce: () => debounce,
  deprecatedPropType: () => deprecatedPropType,
  isMuiElement: () => isMuiElement,
  ownerDocument: () => ownerDocument,
  ownerWindow: () => ownerWindow,
  requirePropFactory: () => requirePropFactory,
  setRef: () => setRef,
  unstable_useId: () => useId,
  unsupportedProp: () => unsupportedProp,
  useControlled: () => useControlled,
  useEventCallback: () => useEventCallback,
  useForkRef: () => useForkRef,
  useIsFocusVisible: () => useIsFocusVisible
});
var init_utils = __esm({
  "node_modules/@material-ui/core/esm/utils/index.js"() {
    init_capitalize();
    init_createChainedFunction();
    init_createSvgIcon();
    init_debounce();
    init_deprecatedPropType();
    init_isMuiElement();
    init_ownerDocument();
    init_ownerWindow();
    init_requirePropFactory();
    init_setRef();
    init_unsupportedProp();
    init_useControlled();
    init_useEventCallback();
    init_useForkRef();
    init_unstable_useId();
    init_useIsFocusVisible();
  }
});

export {
  createChainedFunction,
  init_createChainedFunction,
  debounce,
  init_debounce,
  isMuiElement,
  init_isMuiElement,
  ownerDocument,
  init_ownerDocument,
  ownerWindow,
  init_ownerWindow,
  setRef,
  init_setRef,
  unsupportedProp,
  init_unsupportedProp,
  useControlled,
  init_useControlled,
  useEventCallback,
  init_useEventCallback,
  useForkRef,
  init_useForkRef,
  useId,
  init_unstable_useId,
  useIsFocusVisible,
  init_useIsFocusVisible,
  utils_exports,
  init_utils
};
//# sourceMappingURL=chunk-B3HUPAZL.js.map
